<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>nodejs on James Hughes</title><link>/tags/nodejs/</link><description>Recent content in nodejs on James Hughes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©2020 James Hughes.</copyright><lastBuildDate>Wed, 22 May 2019 09:51:39 +0000</lastBuildDate><atom:link href="/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Benchmarking a pi calculation for fun</title><link>/benchmarking-a-pi-calculation-for-fun/</link><pubDate>Wed, 22 May 2019 09:51:39 +0000</pubDate><guid>/benchmarking-a-pi-calculation-for-fun/</guid><description>Dotnet Core, Golang, Node, C, Java, Python.
This is what I felt like doing on a Tuesday night after seeing yet another article discussing the performance of dotnet core over node.js. As is typical when things like these arise, our team&amp;rsquo;s slack channel went into the lightest of debates about C# vs Node, compiled speeds vs interpreted languages, and finally back to what we were originally discussing - &amp;ldquo;Do you think cypress would be faster than selenium?</description></item><item><title>Fetching data with react</title><link>/fetching-data-with-react/</link><pubDate>Wed, 29 Aug 2018 02:37:01 +0000</pubDate><guid>/fetching-data-with-react/</guid><description>What use is an app that can&amp;rsquo;t persist data?
I&amp;rsquo;m continuing this from my previous post about my efforts to learn about react. I want to be able to persist my data on a server and display it on a web client. To my understanding, this should be pretty simple so I&amp;rsquo;m going to put that theory to the test.
Firstly! We&amp;rsquo;re going to use a Node.js scaffold that I covered off in a previous posting as our backend for this app.</description></item><item><title>Async / Await in Node.js</title><link>/async-/-await-in-node.js/</link><pubDate>Thu, 31 May 2018 01:35:29 +0000</pubDate><guid>/async-/-await-in-node.js/</guid><description>The Async / Await functionality introduced into Node.js in v7.10.0 is legitimately a godsend. The Async / Await paradigm works with promises to do exactly what the paradigm implies. It will asynchronously call the function and await it&amp;rsquo;s response before continuing on with the rest of the function. Previously, you could do this with promise chaining. Passing results from one promise to the next. Where this issue fell apart is when you needed to use the result of Promise 1 in Promise 4.</description></item><item><title>Yet Another Stateless Authentication Blog Post for the MEAN stack.</title><link>/yet-another-stateless-authentication-blog-post-for-the-mean-stack./</link><pubDate>Sat, 05 May 2018 03:32:35 +0000</pubDate><guid>/yet-another-stateless-authentication-blog-post-for-the-mean-stack./</guid><description>#inb4: this ain&amp;rsquo;t new.
I&amp;rsquo;m writing this for everyone that wants a slightly more organized approach to express middleware and authentication. I&amp;rsquo;m writing this because once again I was inspired by how much I adore Node, Express, and all the delights that come from being able to implement my API&amp;rsquo;s and leverage middlewares. Also, I&amp;rsquo;m using async / await, which is pretty neat.
I&amp;rsquo;m going to use MongoDB as a datastore it just jives so well with Node.</description></item><item><title>Installing Node without Sudo - Ubuntu 14.04 LTS</title><link>/installing-node-without-sudo-ubuntu-14.04-lts/</link><pubDate>Wed, 08 Apr 2015 03:42:01 +0000</pubDate><guid>/installing-node-without-sudo-ubuntu-14.04-lts/</guid><description>If you&amp;rsquo;re unlike me and really don&amp;rsquo;t care about superuser permissions or having the most up-to-date releases, you can just do the regular old naive thing and use the package manager&amp;hellip;
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install nodejs However since you&amp;rsquo;re here, I&amp;rsquo;m betting this doesn&amp;rsquo;t jive with you.
The idea of having to give checked out source code from the npm repository super user access makes me quite uncomfortable.</description></item></channel></rss>