<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>golang on James Hughes</title><link>/categories/golang/</link><description>Recent content in golang on James Hughes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â©2020 James Hughes.</copyright><lastBuildDate>Wed, 22 May 2019 09:51:39 +0000</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Benchmarking a pi calculation for fun</title><link>/2019/05/benchmarking-a-pi-calculation-for-fun/</link><pubDate>Wed, 22 May 2019 09:51:39 +0000</pubDate><guid>/2019/05/benchmarking-a-pi-calculation-for-fun/</guid><description>Dotnet Core, Golang, Node, C, Java, Python.
This is what I felt like doing on a Tuesday night after seeing yet another article discussing the performance of dotnet core over node.js. As is typical when things like these arise, our team&amp;rsquo;s slack channel went into the lightest of debates about C# vs Node, compiled speeds vs interpreted languages, and finally back to what we were originally discussing - &amp;ldquo;Do you think cypress would be faster than selenium?</description></item><item><title>Brainteasers - they're important!</title><link>/2018/11/brainteasers-theyre-important/</link><pubDate>Tue, 13 Nov 2018 10:47:10 +0000</pubDate><guid>/2018/11/brainteasers-theyre-important/</guid><description>48 days ago I signed up for https://www.dailycodingproblem.com/
I haven&amp;rsquo;t completed all 48 problems however the ones that I have completed, I&amp;rsquo;ve had a blast with. It bring back a challenge that&amp;rsquo;s been missing - not that my work and personal life don&amp;rsquo;t have their own challenges. It brings me back to basics and gets me thinking again on algorithm design and optimization of code.
Much of my development work (which is less and less these days) is done using a framework of some sort which puts a layer of &amp;lsquo;magic&amp;rsquo; on top of the coding experience.</description></item><item><title>Go - Micro-services and Embedded Databases [Part 2]</title><link>/2018/09/go-micro-services-and-embedded-databases-part-2/</link><pubDate>Mon, 24 Sep 2018 09:51:32 +0000</pubDate><guid>/2018/09/go-micro-services-and-embedded-databases-part-2/</guid><description>If you haven&amp;rsquo;t already, check out Part 1[!]
First things first - let&amp;rsquo;s make these responses something machine readable instead of just some plain text! That&amp;rsquo;s a nice and easy way to dive back into the code!
We are going to create 2 new structs in the router.go file to declare how the app is going to return Errors and Standard responses.
package main // ... type ApiErrorResponse struct { Error string `json:&amp;#34;error&amp;#34;` } type ApiStandardResponse struct { Payload interface{} `json:&amp;#34;payload&amp;#34;` } This is menial, but it helps our responses have a bit more structure.</description></item><item><title>Go - Micro-services and Embedded Databases [Part 1]</title><link>/2018/09/go-micro-services-and-embedded-databases-part-1/</link><pubDate>Wed, 19 Sep 2018 06:30:15 +0000</pubDate><guid>/2018/09/go-micro-services-and-embedded-databases-part-1/</guid><description>This is fun!
FYI - If you&amp;rsquo;re looking for Part 2, it&amp;rsquo;s here[.]
I&amp;rsquo;ve been meaning to learn a few of the things I&amp;rsquo;m going to go over in this post. Firstly, I want to make an actual useful application using Go. I want it to be run as a microservice with it&amp;rsquo;s own database. Instead of putting it in a docker container, I want to just use an embedded database that the executable can use.</description></item><item><title>Learning Go - Morse Code!</title><link>/2018/08/learning-go-morse-code/</link><pubDate>Wed, 15 Aug 2018 02:52:19 +0000</pubDate><guid>/2018/08/learning-go-morse-code/</guid><description>I was watching Churchill&amp;rsquo;s secret agents on Netflix the other day
When all of a sudden I got a hit of nostalgia when they got to the portion on morse code. Such an ingenious little method of communcation that I still, to this day, couldn&amp;rsquo;t follow for the life of me! I took a class on encryption and one of the first concepts they spoke of was morse code. Taking language and transcribing it into a not-so-easy to decipher combination of beeps and blips to send messages over a wire.</description></item></channel></rss>